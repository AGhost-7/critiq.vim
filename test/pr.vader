
Before:
  runtime autoload/critiq.vim
  let g:critiq_github_url = 'http://localhost:5000'
  fu! s:on_response(...)
    let g:last_response = a:000
  endfu

Execute(lists open prs):
  call critiq#pr#list_open_prs(['neovim/neovim'], 1, {}, function('s:on_response'))
  call critiq#request#await_response()
  let g:pr_issues = g:last_response[0]
  AssertEqual empty(g:last_response[0]), 0
  AssertEqual g:last_response[1], 1

Execute(fetches a diff):
  call critiq#pr#diff(g:pr_issues[0], function('s:on_response'))
  call critiq#request#await_response()
  AssertEqual 'hello diff', g:last_response[0]['body'][0]

Execute(fetch full pr):
  call critiq#pr#pull_request(g:pr_issues[0], function('s:on_response'))
  call critiq#request#await_response()
  let g:pr_1 = g:last_response[0].body
  AssertEqual g:pr_1.number, 1

Execute(submit review):
  call critiq#pr#submit_review(g:pr_1, 'APPROVE', 'LGTM')
  call critiq#request#await_response()
  " This doesn't have a callback so need to use request.vim internals to
  " get the response given back by the server.
  AssertEqual critiq#request#last_response()['body']['body'], 'LGTM'
  AssertEqual critiq#request#last_response()['body']['event'], 'APPROVE'

Execute(load comments):
  call critiq#pr#pr_comments(g:pr_issues[0], function('s:on_response'))
  call critiq#request#await_response()
  AssertEqual g:last_response[0]['body'][0]['path'], 'foobar.txt'

Execute(submit comment):
  let line_diff = { 'file_index': 1, 'file': 'foobar.txt' }
  let body = 'needs more salt and pepper'
  call critiq#pr#submit_comment(g:pr_1, line_diff, body)
  call critiq#request#await_response()
  AssertEqual critiq#request#last_response()['body']['body'], body

Execute(merge pr):
  call critiq#pr#merge_pr(g:pr_1)
  call critiq#request#await_response()

Execute(repo labels):
  call critiq#pr#repo_labels(g:pr_issues[0], function('s:on_response'))
  call critiq#request#await_response()
  let g:labels_1 = critiq#request#last_response()
