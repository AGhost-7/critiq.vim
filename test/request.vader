
Before:
  let s:base_url = 'localhost:5000'
  let g:last_response = {}
  fu! s:on_response(response)
    let g:last_response = a:response
  endfu
  let s:default_option = { 'callback': function('s:on_response') }


After:
  unlet g:last_response

Execute(Runs basic get request):
  call critiq#request#send(s:base_url, s:default_option)
  call critiq#request#await_response()
  AssertEqual empty(g:last_response), 0
  AssertEqual g:last_response['code'], 200

Execute(Handles invalid requests):
  call critiq#request#send('boom', s:default_option)
  call critiq#request#await_response()
  AssertEqual empty(g:last_response), 0
  AssertEqual g:last_response['code'], 0

Execute(Allows waiting for the next response):

  let g:critiq_skip = 1
  let g:critiq_called = 0

  fu! s:on_response_skipped(response)
    if g:critiq_skip
      call critiq#request#next_response(function('s:on_response_skipped'), a:response)
    else
      let g:critiq_called += 1
    endif
  endfu

  let opts = { 'callback': function('s:on_response_skipped') }
  call critiq#request#send(s:base_url, opts)
  call critiq#request#await_response()
  call critiq#request#send(s:base_url, opts)
  call critiq#request#await_response()
  AssertEqual g:critiq_called, 0
  let g:critiq_skip = 0
  call critiq#request#send(s:base_url, opts)
  call critiq#request#await_response()
  AssertEqual g:critiq_called, 3

  unlet g:critiq_skip
  unlet g:critiq_called

Execute(Encode url):
  AssertEqual critiq#request#urlencode('hello!'), 'hello%21'
  AssertEqual critiq#request#urlencode('hello world'), 'hello%20world'
