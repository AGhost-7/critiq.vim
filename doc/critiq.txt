*critiq.txt*  Github code reviews from Neovim.

===============================================================================
1. Introduction                                           *critiq-introduction*

Critiq provides an interface to open pull requests which allows you to do code
reviews from your editor.

NOTE: Undocumented commands, functions, mappings, etc are subject to change at
any time without notice.


===============================================================================
2. Getting Started                                     *critiq-getting-started*

Start by placing your Github user name and password (or api token) into the
`GH_USER` and `GH_PASS` environment variables repectively.

After doing this, move to the directory for your git repository where there
are pull requests to review. Run `:Critiq` to start your pull request
reviewing session.


===============================================================================
3. Commands                                                   *critiq-commands*


                                                                      *:Critiq*
:Critiq [args]
  
  Views: all

  Using this command will list all open pull requests for the given
  repositories. For example:
>
    :Critiq neovim/neovim vim/vim
<
  Would display all open pull requests on the vim and neovim repositories. If
  no repository is specified, the repository will be extracted from the git
  origin remote url.

                                                                *:CritiqOpenPr*
:CritiqOpenPr
  
  Views: Pull request list.

  Opens the pull request from the editor in a new tab.

                                                              *:CritiqBrowsePr*
:CritiqBrowsePr
  
  Views: Pull request list, Pull request.

  Open the pull request from the github site. If in pull request listing the
  pull request this command will open is determined by the location of the
  cursor.

                                                               *:CritiqApprove*
:CritiqApprove
  
  Views: Pull request.

  Approve the pull request.

                                                        *:CritiqRequestChanges*
:CritiqRequestChanges

  Views: Pull request.

  Request changes on the pull request.

                                                               *:CritiqComment*
:CritiqComment

  Views: Pull request.

  Leave a comment on the pull request instead of approving/requesting changes.

                                                           *:CritiqCommentLine*
:CritiqCommentLine

  Views: Pull request.

  Leave a comment on a specific line. The line where the comment will be shown
  is determined by the location of the cursor.

                                                                 *:CritiqMerge*
:CritiqMerge

  Views: Pull request.

  Merge the pull request.

                                                              *:CritiqCheckout*
:CritiqCheckout

Views: Pull request.

  Will locally check you out to the branch of the pull request if the current
  working directory is the correct git repository.

                                                              *:CritiqOpenFile*
:CritiqOpenFile

  Views: Pull request.

  Open the file in the diff. Relies on the current working directory to be
  the correct git repository and the correct branch for the pull request.

                                                           *:CritiqLoadMorePrs*
:CritiqLoadMorePrs

  Views: Pull request list.

  Loads more open pull requests into the pull requests listing.


===============================================================================
4. Autocommands                                                *critiq-autocmd*

To allow users to customize the different views, custom autocomand events are
fired if specified. For example, if you wanted to change the `o` mapping on
the pull request list to do something else, you could do the following:
>
  fu! s:on_pr_list()
    nnoremap <buffer> o :CritiqBrowsePr<cr>
  endfu

  autocmd User CritiqPrList call s:on_pr_list()
<

                                                        *critiq-autocmd-review*
CritiqReview

  Triggered when the buffer for the pull request review is created.

                                                            *critiq-autocmd-pr*
CritiqPr
  
  Executes when the pull request diff is displayed.

                                                       *critiq-autocmd-pr-list*
CritiqPrList

  Executes when the initial view with multiple pull requests is displayed.

                                                       *critiq-autocmd-comment*
CritiqComment

  Executed when the comment buffer is shown.

                                                     *critiq-autocmd-open-file*
CritiqOpenFile

  Event triggers when a file is opened from the diff using the command
  `CritiqOpenFile`.


===============================================================================
5. Configuration Variables                                   *critiq-variables*


                                                              *critiq-$GH_USER*
$GH_USER
  
  User name for authenticating with github. If the environment variable is not
  set this plugin will refuse to function.

                                                              *critiq-$GH_PASS*
$GH_PASS
  
  Required environment variable for authenticating with Github. This
  environment variable can be an API token instead of your actual password.

                                                             *critiq-$JIRA_URL*
$JIRA_URL

  Required environment variable if you want to use the builtin Jira
  integration for issues.

                                                  *critiq-g:critiq_no_mappings*
g:critiq_no_mappings

  This disables all the default key mappings. By default all mappings are
  enabled.


===============================================================================

  vim:tw=78:ts=2:sts=2:sw=2:ft=help:norl:expandtab:
